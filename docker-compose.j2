version: '3.8'

services:

  web-lb:
    container_name: web-lb
    build:
      context: .
      dockerfile: Dockerfile-haproxy
    image: haproxy:custom
    volumes:
      - ./config/web-haproxy/:/usr/local/etc/haproxy/
      - ./config/certs/:/etc/ssl/certs/
    networks:
      - frontend_network
    ports:
      - "443:443"
    hostname: haproxy
    user: root
    restart: unless-stopped

  app-lb:
    container_name: app-lb
    build:
      context: .
      dockerfile: Dockerfile-haproxy
    image: haproxy:custom
    volumes:
      - ./config/app-haproxy/:/usr/local/etc/haproxy/
    networks:
      - frontend_network
    expose:
      - "8000"
    hostname: haproxy
    user: root
    restart: unless-stopped
{% for i in range(num_web) %}
  web{{i}}:
    container_name: web{{i}}
    image: nginx:latest
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./static:/opt/services/ufts/static
      - ./media:/opt/services/ufts/media
      - ./software:/opt/services/ufts/software
    networks:
      - frontend_network
    restart: unless-stopped
{% endfor %}
{% for i in range(num_app) %}
  app{{i}}:
    container_name: app{{i}}
    build:
      context: .
      args:
        UFTS_UID: {{UID}}
        UFTS_GID: {{GID}}
    image: ufts-app
    volumes:
      - .:/opt/services/ufts/src
      - ./static:/opt/services/ufts/static
      - ./media:/opt/services/ufts/media
      - ./software:/opt/services/ufts/software
    labels:
      service_ip: 172.20.10.{{100 + i}}
    networks:
      frontend_network:
        ipv4_address: 172.20.10.{{100 + i}}
      backend_network:
        ipv4_address: 172.20.11.{{100 + i}}
    depends_on:
      - db
    restart: unless-stopped
{% endfor %}

  db:
    container_name: db
    image: postgres:10
    env_file:
      - config/db/postgres_env
    networks:
      - backend_network
    volumes:
      - db_volume:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    container_name: redis
    image: "redis:alpine"
    networks:
      - redis_network
    restart: unless-stopped

  celery:
    container_name: celery
    build:
      context: .
      dockerfile: Dockerfile-celery
      args:
        UFTS_UID: {{UID}}
        UFTS_GID: {{GID}}
    image: celery:custom
    command: >
             celery -A ufts worker
             --pidfile=/var/run/celery/celeryd.pid
             -l info -c 3
    networks:
      - redis_network
      - backend_network
    volumes:
      - .:/opt/services/ufts/src
      - ./static:/opt/services/ufts/static
      - ./media:/opt/services/ufts/media
      - ./software:/opt/services/ufts/software
    depends_on:
      - db
      - redis
    restart: unless-stopped

  celery-beat:
    container_name: celery-beat
    build:
      context: .
      dockerfile: Dockerfile-celery
      args:
        UFTS_UID: {{UID}}
        UFTS_GID: {{GID}}
    image: celery:custom
    command: >
             celery -A ufts beat
             --pidfile=/var/run/celery/celeryd.pid
             --schedule=/var/run/celery/celerybeat-schedule
             -l info
    networks:
      - redis_network
    volumes:
      - .:/opt/services/ufts/src
      - ./static:/opt/services/ufts/static
      - ./media:/opt/services/ufts/media
      - ./software:/opt/services/ufts/software
    depends_on:
      - db
      - redis
    restart: unless-stopped

networks:
  frontend_network:
    ipam:
      driver: default
      config:
        - subnet: "172.20.10.0/24"
  backend_network:
    ipam:
      driver: default
      config:
        - subnet: "172.20.11.0/24"
  redis_network:
    ipam:
      driver: default
      config:
        - subnet: "172.20.12.0/24"

volumes:
  db_volume:
