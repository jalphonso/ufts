version: '3'

services:

  web-lb:
    build:
      context: .
      dockerfile: Dockerfile-haproxy
    volumes:
      - ./config/web-haproxy/:/usr/local/etc/haproxy/
      - ./config/certs/:/etc/ssl/certs/
    depends_on:
      - web
    networks:
      - frontend_network
    ports:
      - "443:443"
    hostname: haproxy
    user: root
    restart: unless-stopped

  app-lb:
    build:
      context: .
      dockerfile: Dockerfile-haproxy
    volumes:
      - ./config/app-haproxy/:/usr/local/etc/haproxy/
    depends_on:
      - app
    networks:
      - frontend_network
    expose:
      - "8000"
    hostname: haproxy
    user: root
    restart: unless-stopped

  web:
    image: nginx:latest
    volumes:
      - ./config/nginx/conf.d:/etc/nginx/conf.d
      - ./static:/opt/services/ufts/static
      - media_volume:/opt/services/ufts/media
      - software_volume:/opt/services/ufts/software
    depends_on:
      - app
    networks:
      - frontend_network
    restart: unless-stopped

  app:
    build: .
    volumes:
      - .:/opt/services/ufts/src
      - ./static:/opt/services/ufts/static
      - media_volume:/opt/services/ufts/media
      - software_volume:/opt/services/ufts/software
    networks:
      - frontend_network
      - backend_network
    depends_on:
      - db
    restart: unless-stopped

  db:
    image: postgres:10
    env_file:
      - config/db/postgres_env
    networks:
      - backend_network
    volumes:
      - db_volume:/var/lib/postgresql/data
    restart: unless-stopped

  redis:
    image: "redis:alpine"
    networks:
      - redis_network
    restart: unless-stopped

  celery:
    build:
      context: .
      dockerfile: Dockerfile-celery
    command: celery -A ufts worker -l info -c 3 --uid=nobody --gid=nogroup
    networks:
      - redis_network
      - backend_network
    volumes:
      - .:/opt/services/ufts/src
      - ./static:/opt/services/ufts/static
      - media_volume:/opt/services/ufts/media
      - software_volume:/opt/services/ufts/software
    depends_on:
      - db
      - redis
    restart: unless-stopped

  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile-celery
    command: celery -A ufts beat -l info --uid=nobody --gid=nogroup
    networks:
      - redis_network
    volumes:
      - .:/opt/services/ufts/src
      - ./static:/opt/services/ufts/static
      - media_volume:/opt/services/ufts/media
      - software_volume:/opt/services/ufts/software
    depends_on:
      - db
      - redis
    restart: unless-stopped

networks:
  frontend_network:
    driver: bridge
  backend_network:
    driver: bridge
  redis_network:
    driver: bridge

volumes:
  db_volume:
  media_volume:
  software_volume:
